#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var through = require('through');
var program = require('commander');
var publish = require('../publish/index');


program
  .command('all [markdown] [directory]')
  .description('create all output formats with default options')
  .action(function(mdFile, directory, options) {
    publishHtml(mdFile, options, fs.createWriteStream(path.join(directory, 'Spielordnung.html')));
    publishPDF(mdFile, path.join(directory, 'Spielordnung.pdf'), options);
  });

program
  .command('html [markdown]')
  .description('publish as HTML')
  .option('-h, --scaffold [file]', 'HTML scaffold file')
  .option('-p, --plain', 'generate plain table, without HTML scaffold')
  .action(publishHtml);

program
  .command('pdf [markdown] [output]')
  .description('publish as PDF')
  .option('--date [date]', 'creation date')
  .option('--generated [date]', 'generation date')
  .option('--generated-by [name]', 'PDF generator')
  .option('-h, --scaffold [file]', 'HTML scaffold file')
  .option('-p, --phantom-path [path]', 'PhantomJS executive path')
  .option('-r, --runnings-path [path]', 'path to runnings (header, footer)')
  .option('-f, --paper-format [format]', "paper format ('A3', 'A4', 'A5', 'Legal', 'Letter' or 'Tabloid')")
  .option('-o, --paper-orientation [orientation]', "'portrait' or 'landscape'")
  .option('-b, --paper-border [measurement]', "Supported dimension units are: 'mm', 'cm', 'in', 'px'")
  .option('-t, --render-delay [millis]', "Delay before rendering the PDF (give HTML and CSS a chance to load)")
  .action(publishPDF);

program.parse(process.argv);


function publishHtml(mdFile, options, outputStream) {
  if (!mdFile) {
    console.log('Markdown file required');
    process.exit(1);
  }

  outputStream = outputStream || process.stdout;

  fs.createReadStream(mdFile)
    .pipe(publish.html(options))
    .pipe(outputStream);
}


function publishPDF(mdFile, outputPath, options) {
  if (!mdFile) {
    console.log('Markdown file required');
    process.exit(1);
  }
  if (!outputPath) {
    console.log('Output path required');
    process.exit(1);
  }

  if (!options.date) {
    var md = fs.readFileSync(mdFile, 'utf8');
    var jvChanged = md.match('Diese Jugendspielordnung wurde von der Jugendversammlung der Deutschen Schachjugend am 2. März 2008 in Bremen beschlossen und zuletzt am (.*) in .* geändert.')[1]
    var aksChanged = md.match('Die Ausführungsbestimmungen wurden zuletzt (vom Arbeitskreis Spielbetrieb|vom Vorstand|von der Jugendversammlung) am (.*) geändert.')[2]
    
    var jvChangedDate = parseGermanDate(jvChanged);
    var aksChangedDate = parseGermanDate(aksChanged);

    options.date = jvChangedDate > aksChangedDate
                    ? jvChangedDate
                    : aksChangedDate;
    options.date = dateString(options.date);
  }

  options.generated = options.generated || dateString(new Date());


  fs.createReadStream(mdFile)
    .pipe(publish.html(options))
    .pipe(publish.pdf(outputPath, options));
}


function parseGermanDate(date) {
  var months = ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'];

  var parsed = date.match(/^([0-9]{1,2})\. ([^\s]+) (20[0-9]{2})$/);
  var d = new Date(''+(months.indexOf(parsed[2])+1)+'/'+parsed[1]+'/'+parsed[3]);

  return d;
}


function dateString(date) {
  return (date.getDate() < 10 ? '0' : '') + date.getDate() + '.'
    + (date.getMonth()+1 < 10 ? '0' : '') + (date.getMonth() + 1) + '.'
    + date.getFullYear();
}